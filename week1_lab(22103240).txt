Q-2
#include <iostream>
#include <vector>
using namespace std;
 
int main()
{
    int n;
    cin >> n;
    vector<int> v(n);
    double average = 0;
    for (int i = 0; i < n; i++)
    {
        cin >> v[i];
        average += v[i];
    }
    average /= n;
    cout << average << endl;
}
Q-3
#include <bits/stdc++.h>
using namespace std;
// bits
// test
// inarr
// outarr
int main()
{
    string a;
    cin >> a;
    int start = 0, end = a.length() - 1;
    while (start < end)
    {
        swap(a[start++], a[end--]);
    }
    cout << a;
}
                       	   Week-1(b)
 
Q-2
#include <iostream>
using namespace std;
 
int main()
{
    int rows, cols;
 
    cout << "Enter number of rows and columns: ";
    cin >> rows >> cols;
 
    int matrix[rows][cols];
    int transpose[cols][rows]; // Transposed matrix dimensions
 
    // Input matrix elements
    cout << "Enter matrix elements:" << endl;
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            cin >> matrix[i][j];
        }
    }
 
    // Calculate the transpose
    for (int i = 0; i < rows; i++)
    {
        for (int j = 0; j < cols; j++)
        {
            transpose[j][i] = matrix[i][j];
        }
    }
 
    // Display the transposed matrix
    cout << "Transposed matrix:" << endl;
    for (int i = 0; i < cols; i++)
    {
        for (int j = 0; j < rows; j++)
        {
            cout << transpose[i][j] << " ";
        }
        cout << endl;
    }
 
    return 0;
}
 
Q-3
#include <bits/stdc++.h>
using namespace std;
// bits
// test
// inarr
// outarr
 
int main()
{
    string s;
    getline(cin, s);
    map<string, int> m;
    string temp = "";
    for(char c:s)
    {
        if (c != ' ')
        {
            temp += c;
        }
        else
        {
            if (!temp.empty())
            {
                m[temp]++;
                temp = "";
            }
        }
    }
    if (!temp.empty())
    {
        m[temp]++;
    }
 
       for (auto t : m)
    {
        cout << t.first << " " << t.second << endl;
    }
}
